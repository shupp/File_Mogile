<?php
/**
 * File_MogileTest 
 * 
 * PHP Version 5.2.0
 * 
 * @uses PHPUnit_Framework_TestCase
 * @category  File
 * @package   File_Mogile
 * @author    Bill Shupp <hostmaster@shupp.org>
 * @copyright 2007 Digg.com, Inc.
 * @license   http://www.opensource.org/licenses/bsd-license.php BSD
 * @version   CVS: $Id:$
 * @link      http://pear.php.net/package/File_Mogile
 */

require_once 'PHPUnit/Framework.php';
require_once 'File/Mogile.php';

/**
 * Tests for File_Mogile.  No mogile server needed.
 * 
 * Generated by PHPUnit on 2009-01-15 at 20:32:56.
 * 
 * @uses      PHPUnit_Framework_TestCase
 * @category  File
 * @package   File_Mogile
 * @author    Bill Shupp <hostmaster@shupp.org>
 * @copyright 2007 Digg.com, Inc.
 * @license   http://www.opensource.org/licenses/bsd-license.php BSD
 * @link      http://pear.php.net/package/File_Mogile
 */
class File_MogileTest extends PHPUnit_Framework_TestCase
{
    
    /**
     * Dummy hosts for constructor
     * 
     * @var string
     */
    protected $hosts = array('http://example.com');

    /**
     * Methods to mock
     * 
     * @var array
     */
    protected $methods = array('connect',
                               'socketConnect',
                               'socketRead',
                               'socketWrite',
                               'socketClose');

    /**
     * @var File_Mogile
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = $this->getMock('File_Mogile',
                                       $this->methods,
                                       array($this->hosts, 'production'));
        $this->object->expects($this->any())
                     ->method('socketConnect')
                     ->will($this->returnValue(true));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test that the constructor sets options correcty
     * 
     * @return void
     */
    public function testConstructor()
    {
        $socketTimeout  = 1.1;
        $streamTimeout  = 1.2;
        $commandTimeout = 4;

        $options = array('socketTimeout'  => $socketTimeout,
                         'streamTimeout'  => $streamTimeout,
                         'commandTimeout' => $commandTimeout);

        $object = $this->getMock('File_Mogile',
                                 $this->methods,
                                 array($this->hosts, 'production', $options));

        $this->assertSame($socketTimeout, File_Mogile::$socketTimeout);
        $this->assertSame($streamTimeout, File_Mogile::$streamTimeout);
        $this->assertSame($commandTimeout, File_Mogile::$commandTimeout);
    }

    /**
     * Test __construct failure
     * 
     * @expectedException File_Mogile_Exception
     * @return void
     */
    public function testConstructorFail()
    {
        $options = array('foo' => 'bar');
        $object  = $this->getMock('File_Mogile',
                                  $this->methods,
                                  array($this->hosts, 'production', $options));
    }

    /**
     * Test getDomains()
     *
     * @return void
     */
    public function testGetDomains()
    {
        $response = "OK domains=1&classes=1&domain1=staging&domain1classes=1&domain1class1name=testclass1&domain1class1mindevcount=50";
        $expected = array('staging' => array('testclass1' => '50'));

        $this->object->expects($this->any())
                     ->method('socketRead')
                     ->will($this->returnValue($response));
        $this->assertSame($expected, $this->object->getDomains());
    }

    /**
     * Test get paths
     *
     * @return void
     */
    public function testGetPaths()
    {
        $response = "OK path2=http://127.0.0.1:7500/dev1/0/000/435/0000435316.fid&path1=http://127.0.0.1:7500/dev2/0/000/435/0000435316.fid&paths=2";
        $expected = array(
            'path2' => 'http://127.0.0.1:7500/dev1/0/000/435/0000435316.fid',
            'path1' => 'http://127.0.0.1:7500/dev2/0/000/435/0000435316.fid'
        );
        $this->object->expects($this->any())
                     ->method('socketRead')
                     ->will($this->returnValue($response));
        $this->assertSame($expected, $this->object->getPaths('somekey'));
    }

    /**
     * @todo Implement testDelete().
     * @return void
     */
    public function testDelete()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRename().
     * @return void
     */
    public function testRename()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testListKeys().
     * @return void
     */
    public function testListKeys()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testReproxy().
     * @return void
     */
    public function testReproxy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetFileData().
     * @return void
     */
    public function testGetFileData()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPassthru().
     * @return void
     */
    public function testPassthru()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPassthruFileData().
     * @return void
     */
    public function testPassthruFileData()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testStoreFile().
     * @return void
     */
    public function testStoreFile()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testStoreData().
     * @return void
     */
    public function testStoreData()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
